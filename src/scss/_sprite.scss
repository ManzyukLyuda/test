// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$flag-fr-name: 'flag-fr';
$flag-fr-x: 30px;
$flag-fr-y: 0px;
$flag-fr-offset-x: -30px;
$flag-fr-offset-y: 0px;
$flag-fr-width: 24px;
$flag-fr-height: 16px;
$flag-fr-total-width: 75px;
$flag-fr-total-height: 90px;
$flag-fr-image: '../img/sprite.png';
$flag-fr: (30px, 0px, -30px, 0px, 24px, 16px, 75px, 90px, '../img/sprite.png', 'flag-fr', );
$flag-gb-name: 'flag-gb';
$flag-gb-x: 30px;
$flag-gb-y: 32px;
$flag-gb-offset-x: -30px;
$flag-gb-offset-y: -32px;
$flag-gb-width: 24px;
$flag-gb-height: 16px;
$flag-gb-total-width: 75px;
$flag-gb-total-height: 90px;
$flag-gb-image: '../img/sprite.png';
$flag-gb: (30px, 32px, -30px, -32px, 24px, 16px, 75px, 90px, '../img/sprite.png', 'flag-gb', );
$flag-gr-name: 'flag-gr';
$flag-gr-x: 30px;
$flag-gr-y: 64px;
$flag-gr-offset-x: -30px;
$flag-gr-offset-y: -64px;
$flag-gr-width: 23px;
$flag-gr-height: 16px;
$flag-gr-total-width: 75px;
$flag-gr-total-height: 90px;
$flag-gr-image: '../img/sprite.png';
$flag-gr: (30px, 64px, -30px, -64px, 23px, 16px, 75px, 90px, '../img/sprite.png', 'flag-gr', );
$logo-name: 'logo';
$logo-x: 0px;
$logo-y: 0px;
$logo-offset-x: 0px;
$logo-offset-y: 0px;
$logo-width: 14px;
$logo-height: 90px;
$logo-total-width: 75px;
$logo-total-height: 90px;
$logo-image: '../img/sprite.png';
$logo: (0px, 0px, 0px, 0px, 14px, 90px, 75px, 90px, '../img/sprite.png', 'logo', );
$nav-arrow-name: 'nav-arrow';
$nav-arrow-x: 70px;
$nav-arrow-y: 40px;
$nav-arrow-offset-x: -70px;
$nav-arrow-offset-y: -40px;
$nav-arrow-width: 4px;
$nav-arrow-height: 2px;
$nav-arrow-total-width: 75px;
$nav-arrow-total-height: 90px;
$nav-arrow-image: '../img/sprite.png';
$nav-arrow: (70px, 40px, -70px, -40px, 4px, 2px, 75px, 90px, '../img/sprite.png', 'nav-arrow', );
$tab-arrow-down-name: 'tab-arrow-down';
$tab-arrow-down-x: 70px;
$tab-arrow-down-y: 0px;
$tab-arrow-down-offset-x: -70px;
$tab-arrow-down-offset-y: 0px;
$tab-arrow-down-width: 5px;
$tab-arrow-down-height: 3px;
$tab-arrow-down-total-width: 75px;
$tab-arrow-down-total-height: 90px;
$tab-arrow-down-image: '../img/sprite.png';
$tab-arrow-down: (70px, 0px, -70px, 0px, 5px, 3px, 75px, 90px, '../img/sprite.png', 'tab-arrow-down', );
$tab-arrow-name: 'tab-arrow';
$tab-arrow-x: 70px;
$tab-arrow-y: 19px;
$tab-arrow-offset-x: -70px;
$tab-arrow-offset-y: -19px;
$tab-arrow-width: 3px;
$tab-arrow-height: 5px;
$tab-arrow-total-width: 75px;
$tab-arrow-total-height: 90px;
$tab-arrow-image: '../img/sprite.png';
$tab-arrow: (70px, 19px, -70px, -19px, 3px, 5px, 75px, 90px, '../img/sprite.png', 'tab-arrow', );
$spritesheet-width: 75px;
$spritesheet-height: 90px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($flag-fr, $flag-gb, $flag-gr, $logo, $nav-arrow, $tab-arrow-down, $tab-arrow, );
$spritesheet: (75px, 90px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
